from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import logging

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(level=logging.INFO)

# üëâ –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –¥–∞—Å—Ç @BotFather
API_TOKEN = "–¢–û–ö–ï–ù_–û–¢_BOTFATHER"

# üëâ ID –≥—Ä—É–ø–ø—ã (–∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å ‚Äî –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–∏–∂–µ)
GROUP_ID = -1001234567890  

# üëâ –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤/—Å–æ–≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ (—Ç–≤–æ–∏ Telegram ID –∏ ID —Ç–µ—Ö, –∫–æ–º—É –¥–∞—ë—à—å –¥–æ—Å—Ç—É–ø)
ADMINS = [123456789, 987654321]

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—é–¥–∞ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è —Ç–µ, –∫—Ç–æ –ø–∏—Å–∞–ª –±–æ—Ç—É)
users = set()

# === 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –±–æ—Ç—É ‚Üí –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤ –≥—Ä—É–ø–ø—É ===
@dp.message_handler(content_types=types.ContentTypes.ANY)
async def user_message(message: types.Message):
    if message.chat.type == "private":
        users.add(message.chat.id)
        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await bot.send_message(
            GROUP_ID,
            f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç <b>{message.from_user.full_name}</b> "
            f"(id: {message.chat.id}):"
        )
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.forward_message(GROUP_ID, message.chat.id, message.message_id)

# === 2. –û—Ç–≤–µ—Ç –∏–∑ –≥—Ä—É–ø–ø—ã ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ===
@dp.message_handler(lambda m: m.chat.id == GROUP_ID and m.reply_to_message)
async def group_reply(message: types.Message):
    text = message.reply_to_message.text
    if text and "id:" in text:
        try:
            user_id = int(text.split("id:")[1].split(")")[0])
            await bot.send_message(user_id, f"üí¨ –û—Ç–≤–µ—Ç –∏–∑ –≥—Ä—É–ø–ø—ã:\n{message.text}")
        except:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

# === 3. –†–∞—Å—Å—ã–ª–∫–∞ (/broadcast —Ç–µ–∫—Å—Ç) ===
@dp.message_handler(commands=["broadcast"])
async def broadcast(message: types.Message):
    if message.from_user.id not in ADMINS:
        return await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É")

    text = message.get_args()
    if not text:
        return await message.reply("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç: /broadcast <—Ç–µ–∫—Å—Ç>")

    count = 0
    for user in list(users):
        try:
            await bot.send_message(user, f"üì¢ {text}")
            count += 1
        except:
            pass
    await message.reply(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

# === 4. –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ ===
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
